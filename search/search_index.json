{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the Firefox Lockbox for iOS documentation!", 
            "title": "Introduction"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release Notes\n\n\n1.0 (Build 1128)\n\n\nDate: 2018-05-14\n\n\nThis build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox; automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data; searching and sorting items; showing/hiding passwords; coping usernames and passwords to the pasteboard (which expire after 60 seconds); opening web addresses in your preferred web browser; Telemetry for event tracking (no personally-identifiable information is collected).\n\n\nThis build DOES NOT include: user-friendly item titles (#193); links to real FAQ content (#172 and #340); proper visual placeholders when an initial sync is occurring (#233) or when no items are found (#44).\n\n\nSome KNOWN ISSUES include: you may sign in and get a \"confirmation\" email, the app doesn't tell you that you need to go find that email so your list appears empty - go find that email and \"Confirm\" your sign ins, please (#328); the autolock timer doesn't automatically lock your app (#356); when navigating away from the list view and a sync occurs in the background the app will pop you back into the list view (#347); the search/filter keyboard is immediately dismissed after the first and second character you type (#351). Don't worry, we'll get these fixed soon!\n\n\nPlease also note: the app may crash on first run \u2014 just open it again and please let us know if you encounter this or anything unexpected. We believe we squashed all kinds of bugs related to first run and sign in but need your help making sure.\n\n\n1.0 (Build 742)\n\n\nDate: 2018-04-24\n\n\nThis build includes: sign in with Firefox Accounts, sign out to \"lock\", search and sort items, show/hide passwords, copy username and password to pasteboard (expires after 60 seconds), open web addresses in preferred web browser.\n\n\nThis build does NOT include: actual Sync data (test data only), Face ID nor Touch ID biometrics to unlock, onboarding instructions, FAQ content.\n\n\nKnown Issues\n\n\n\n\nThe only data loaded into the app is hard-coded test data (not real Sync data)", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#10-build-1128", 
            "text": "Date: 2018-05-14  This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox; automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data; searching and sorting items; showing/hiding passwords; coping usernames and passwords to the pasteboard (which expire after 60 seconds); opening web addresses in your preferred web browser; Telemetry for event tracking (no personally-identifiable information is collected).  This build DOES NOT include: user-friendly item titles (#193); links to real FAQ content (#172 and #340); proper visual placeholders when an initial sync is occurring (#233) or when no items are found (#44).  Some KNOWN ISSUES include: you may sign in and get a \"confirmation\" email, the app doesn't tell you that you need to go find that email so your list appears empty - go find that email and \"Confirm\" your sign ins, please (#328); the autolock timer doesn't automatically lock your app (#356); when navigating away from the list view and a sync occurs in the background the app will pop you back into the list view (#347); the search/filter keyboard is immediately dismissed after the first and second character you type (#351). Don't worry, we'll get these fixed soon!  Please also note: the app may crash on first run \u2014 just open it again and please let us know if you encounter this or anything unexpected. We believe we squashed all kinds of bugs related to first run and sign in but need your help making sure.", 
            "title": "1.0 (Build 1128)"
        }, 
        {
            "location": "/release-notes/#10-build-742", 
            "text": "Date: 2018-04-24  This build includes: sign in with Firefox Accounts, sign out to \"lock\", search and sort items, show/hide passwords, copy username and password to pasteboard (expires after 60 seconds), open web addresses in preferred web browser.  This build does NOT include: actual Sync data (test data only), Face ID nor Touch ID biometrics to unlock, onboarding instructions, FAQ content.", 
            "title": "1.0 (Build 742)"
        }, 
        {
            "location": "/release-notes/#known-issues", 
            "text": "The only data loaded into the app is hard-coded test data (not real Sync data)", 
            "title": "Known Issues"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nThank you for considering and taking the time to contribute!\n\n\nThe following are guidelines for contributing to this project.\n\n\nCode of Conduct\n\n\nThis repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the \nMozilla Community Participation Guidelines\n and \nDeveloper Etiquette Guidelines\n.\n\n\nHow to Get Started\n\n\nPlease refer to installation and build instructions in the \ndocumentation\n.\n\n\nHow to Report Bugs\n\n\nPlease open \na new issue in the GitHub repository\n with steps to reproduce the problem you're experiencing.\n\n\nBe sure to include as much information including screenshots, text output, and both your expected and actual results.\n\n\nHow to Request Enhancements\n\n\nFirst, please refer to the applicable \nGitHub repository\n and search \nthe repository's GitHub issues\n to make sure your idea has not been (or is not still) considered.\n\n\nThen, please \ncreate a new issue in the GitHub repository\n describing your enhancement.\n\n\nBe sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.\n\n\nPlease keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Thank you for considering and taking the time to contribute!  The following are guidelines for contributing to this project.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#code-of-conduct", 
            "text": "This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the  Mozilla Community Participation Guidelines  and  Developer Etiquette Guidelines .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/contributing/#how-to-get-started", 
            "text": "Please refer to installation and build instructions in the  documentation .", 
            "title": "How to Get Started"
        }, 
        {
            "location": "/contributing/#how-to-report-bugs", 
            "text": "Please open  a new issue in the GitHub repository  with steps to reproduce the problem you're experiencing.  Be sure to include as much information including screenshots, text output, and both your expected and actual results.", 
            "title": "How to Report Bugs"
        }, 
        {
            "location": "/contributing/#how-to-request-enhancements", 
            "text": "First, please refer to the applicable  GitHub repository  and search  the repository's GitHub issues  to make sure your idea has not been (or is not still) considered.  Then, please  create a new issue in the GitHub repository  describing your enhancement.  Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.  Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.", 
            "title": "How to Request Enhancements"
        }, 
        {
            "location": "/metrics/", 
            "text": "Firefox Lockbox for iOS Metrics Plan\n\n\nLast Updated: May 1, 2018\n\n\n\n\n\n\n\nAnalysis\n\n\nCollection\n\n\nList of Proposed Events\n\n\nReferences\n\n\n\n\n\n\n\nThis is the metrics collection plan for the Lockbox iOS app. It documents all events that are planned to be collected through telemetry. It will be updated periodically to reflect all new and planned data collection.\n\n\nAnalysis\n\n\nData collection is done solely for the purpose of product development, improvement and maintenance.\n\n\nWe will analyze the data described in this doc \nprimarily\n with the purpose of (dis)confirming the following hypothesis:\n\n\nIf Firefox users have access to their browser-saved passwords, outside of the mobile browser, then they will use those passwords to log into accounts (both in mobile browsers and in apps). We will know this to be true when copy credentials (username or password) is the most frequent action taken in the app.\n\n\nNote that because the first version of the app will not allow for \"auto-filling\" of credentials, the copy events (and to a lesser extent, the password reveal events) are the best signal we have that users are gaining the intended value from the app.\n\n\nIn service to validating the above hypothesis, we plan on answering these specific questions, given the data we plan to collect (see \nList of Proposed Events\n):\n\n\nNote that when referring to copying of \"credentials\", we mean copying of either usernames or passwords.\n\n\n\n\nAre users using Lockbox to retrieve credentials?\n\n\nFor different intervals of time (e.g. day, week, month), what is:\n\n\nThe average rate with which a user copies a credential or reveals a password\n\n\nThe distribution of above rates across all users\n\n\n\n\n\n\n\n\n\n\nPending the implementation of a share sheet, how often do users access Lockbox via a mobile browser?\n\n\nOut of all the times a credential was copied, how often was it a result of tap on the share sheet?\n\n\nThis will help us understand whether users are primarily accessing credentials for use in a browser or with third party apps.\n\n\n\n\n\n\n\n\n\n\nOnce downloaded, do users continue to use the app? (i.e., how well are they retained?)\n\n\nWe will count a user as retained in a given time interval if they perform one of the following actions:\n\n\nDisplay the credential list\n\n\nTap a credential in the credential list\n\n\nCopy a credential to the clipboard\n\n\nReveal a password\n\n\nTap the URI associated with a credential (to open it in an app or browser)\n\n\n\n\n\n\nSince they can be performed automatically, we will \nnot\n count a user as retained if they \nonly\n perform the following actions (in absence of any in the list above):\n\n\nUnlock their credentials\n\n\nSync their credentials from the Firefox desktop browser\n\n\n\n\n\n\n\n\n\n\nDoes requiring a Firefox Account constitute a roadblock to adoption?\n\n\nWhat proportion of new Lockbox users are pre-existing Firefox Account users?\n\n\nWhat proportion of users start the Account sign-in process but never complete it?\n\n\n\n\n\n\nDoes adoption of Lockbox lead to adoption of Firefox Mobile browsers (e.g. Focus)?\n\n\nDo users set the default browser in Lockbox to be a Firefox-related browser?\n\n\n\n\n\n\n\n\nIn addition to answering the above questions that directly concern actions in the app, we will also be analyzing telemetry emitted from the password manager that exists in the the Firefox desktop browser. These analyses will primarily examine whether users of Lockbox start active curation of their credentials in the desktop browser (Lockbox users will not be able to edit credentials directly from the app).\n\n\nCollection\n\n\nData will be collected using this library:\n\n\nhttps://github.com/mozilla-mobile/telemetry-ios/\n\n\nWe plan to submit two ping types.\n\n\nFirst is the \"core ping\", which contains information about the iOS version, architecture, etc of the device lockbox has been installed on:\n\n\nhttps://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/core-ping.html\n\n\nThe second is the \"focus event ping\" which allows us to record event telemetry:\n\n\nhttps://github.com/mozilla-mobile/focus-ios/wiki/Event-Tracking-with-Mozilla%27s-Telemetry-Service\n\n\nThe ping types are defined in \nlockbox-ios/Common/AppDelegate.swift\n. Scheduling of ping transmission is done in the same file.\n\n\nEvery event must contain \ncategory\n, \nmethod\n and \nobject\n fields, and may optionally contain \nvalue\n and \nextra\n fields as well. Possible values for the former three fields are defined in \nlockbox-ios/TelemetryIntegration.swift\n\n\nEvents related to specific items should have an item id in the extra field where possible.\n\n\nHere's an example of (something like) the swift code needed to record the event that fires when an item in the entry list is tapped:\n\n\nTelemetry.default.recordEvent(\n    category: TelemetryEventCategory.action,\n    method: TelemetryEventMethod.tap,\n    object: TelemetryEventObject.entryList,\n    value: nil,\n    extras: [\nitemid\n : itemid]\n)\n\n\n\n\nFinally, the \nappName\n metadata sent with each ping should always be 'Lockbox'.\n\n\nSee here for more information on event schemas:\n\n\nhttps://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#public-js-api\n\n\nList of Implemented Events\n\n\n\n\n\n\nWhen the app starts up:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: startup\n\n\nobject\n: app\n\n\nvalue\n: nil\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nEvents that fire during the FxA signin process:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: signin\n\n\nobject\n: fxa_load_initial_url, fxa_fetching_user_info, fxa_finished_fetching_user_info\n\n\nvalue\n: nil\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen there's an error in the FxA signin process:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: signinError\n\n\nobject\n: fxa_error_redirect_no_state, fxa_error_redirect_no_code, fxa_error_redirect_bad_state, fxa_error_empty_oauth_data, fxa_error_empty_profile_info_data, fxa_error_unexpected_data_format, fxa_error_unknown\n\n\nvalue\n: nil\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen the main item list is shown to the user:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: show\n\n\nobject\n: entryList\n\n\nvalue\n: nil\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen a user shows the details of an item in the entry list:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: show\n\n\nobject\n: entryDetail\n\n\nvalue\n: nil\n\n\nextras\n: [\"itemid\" : itemid]\n\n\n\n\n\n\n\n\nWhen a user taps one of the copy buttons available after being shown entry details:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: tap\n\n\nobject\n: entryCopyUsernameButton, entryCopyPasswordButton\n\n\nvalue\n: nil\n\n\nextras\n: [\"itemid\" : itemid]\n\n\n\n\n\n\n\n\nWhen a user shows details from an item, is the password shown?:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: tap\n\n\nobject\n: reveal_password\n\n\nvalue\n: true or false, whether the pw is displayed\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen one of the settings pages is shown to the user:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: show\n\n\nobject\n: settings_list, settings_autolock, settings_preferred_browser, settings_account, settings_faq, settings_provide_feedback\n\n\nvalue\n: whatever the value of each of the above was changed to, or nil for settings_reset\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen a user changes something on the settings page:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: settingsChanged\n\n\nobject\n: settings_biometric_login, settings_autolock_time, settings_reset, settings_visual_lock, settings_preferred_browser, settings_record_usage_data\n\n\nvalue\n: whatever the value of each of the above was changed to, or nil for settings_reset\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nWhen the app enters the background or foreground:\n\n\n\n\ncategory\n: action\n\n\nmethod\n: background, foreground\n\n\nobject\n: app\n\n\nvalue\n: nil\n\n\nextras\n: nil\n\n\n\n\n\n\n\n\nReferences\n\n\nLibrary used to collect and send telemetry on iOS\n\n\nDescription of the \"Core\" ping\n\n\nDescription of the \"Focus Event\" Ping\n\n\nDescription of Event Schemas in General", 
            "title": "Telemetry and Metrics"
        }, 
        {
            "location": "/metrics/#firefox-lockbox-for-ios-metrics-plan", 
            "text": "Last Updated: May 1, 2018    Analysis  Collection  List of Proposed Events  References    This is the metrics collection plan for the Lockbox iOS app. It documents all events that are planned to be collected through telemetry. It will be updated periodically to reflect all new and planned data collection.", 
            "title": "Firefox Lockbox for iOS Metrics Plan"
        }, 
        {
            "location": "/metrics/#analysis", 
            "text": "Data collection is done solely for the purpose of product development, improvement and maintenance.  We will analyze the data described in this doc  primarily  with the purpose of (dis)confirming the following hypothesis:  If Firefox users have access to their browser-saved passwords, outside of the mobile browser, then they will use those passwords to log into accounts (both in mobile browsers and in apps). We will know this to be true when copy credentials (username or password) is the most frequent action taken in the app.  Note that because the first version of the app will not allow for \"auto-filling\" of credentials, the copy events (and to a lesser extent, the password reveal events) are the best signal we have that users are gaining the intended value from the app.  In service to validating the above hypothesis, we plan on answering these specific questions, given the data we plan to collect (see  List of Proposed Events ):  Note that when referring to copying of \"credentials\", we mean copying of either usernames or passwords.   Are users using Lockbox to retrieve credentials?  For different intervals of time (e.g. day, week, month), what is:  The average rate with which a user copies a credential or reveals a password  The distribution of above rates across all users      Pending the implementation of a share sheet, how often do users access Lockbox via a mobile browser?  Out of all the times a credential was copied, how often was it a result of tap on the share sheet?  This will help us understand whether users are primarily accessing credentials for use in a browser or with third party apps.      Once downloaded, do users continue to use the app? (i.e., how well are they retained?)  We will count a user as retained in a given time interval if they perform one of the following actions:  Display the credential list  Tap a credential in the credential list  Copy a credential to the clipboard  Reveal a password  Tap the URI associated with a credential (to open it in an app or browser)    Since they can be performed automatically, we will  not  count a user as retained if they  only  perform the following actions (in absence of any in the list above):  Unlock their credentials  Sync their credentials from the Firefox desktop browser      Does requiring a Firefox Account constitute a roadblock to adoption?  What proportion of new Lockbox users are pre-existing Firefox Account users?  What proportion of users start the Account sign-in process but never complete it?    Does adoption of Lockbox lead to adoption of Firefox Mobile browsers (e.g. Focus)?  Do users set the default browser in Lockbox to be a Firefox-related browser?     In addition to answering the above questions that directly concern actions in the app, we will also be analyzing telemetry emitted from the password manager that exists in the the Firefox desktop browser. These analyses will primarily examine whether users of Lockbox start active curation of their credentials in the desktop browser (Lockbox users will not be able to edit credentials directly from the app).", 
            "title": "Analysis"
        }, 
        {
            "location": "/metrics/#collection", 
            "text": "Data will be collected using this library:  https://github.com/mozilla-mobile/telemetry-ios/  We plan to submit two ping types.  First is the \"core ping\", which contains information about the iOS version, architecture, etc of the device lockbox has been installed on:  https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/core-ping.html  The second is the \"focus event ping\" which allows us to record event telemetry:  https://github.com/mozilla-mobile/focus-ios/wiki/Event-Tracking-with-Mozilla%27s-Telemetry-Service  The ping types are defined in  lockbox-ios/Common/AppDelegate.swift . Scheduling of ping transmission is done in the same file.  Every event must contain  category ,  method  and  object  fields, and may optionally contain  value  and  extra  fields as well. Possible values for the former three fields are defined in  lockbox-ios/TelemetryIntegration.swift  Events related to specific items should have an item id in the extra field where possible.  Here's an example of (something like) the swift code needed to record the event that fires when an item in the entry list is tapped:  Telemetry.default.recordEvent(\n    category: TelemetryEventCategory.action,\n    method: TelemetryEventMethod.tap,\n    object: TelemetryEventObject.entryList,\n    value: nil,\n    extras: [ itemid  : itemid]\n)  Finally, the  appName  metadata sent with each ping should always be 'Lockbox'.  See here for more information on event schemas:  https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#public-js-api", 
            "title": "Collection"
        }, 
        {
            "location": "/metrics/#list-of-implemented-events", 
            "text": "When the app starts up:   category : action  method : startup  object : app  value : nil  extras : nil     Events that fire during the FxA signin process:   category : action  method : signin  object : fxa_load_initial_url, fxa_fetching_user_info, fxa_finished_fetching_user_info  value : nil  extras : nil     When there's an error in the FxA signin process:   category : action  method : signinError  object : fxa_error_redirect_no_state, fxa_error_redirect_no_code, fxa_error_redirect_bad_state, fxa_error_empty_oauth_data, fxa_error_empty_profile_info_data, fxa_error_unexpected_data_format, fxa_error_unknown  value : nil  extras : nil     When the main item list is shown to the user:   category : action  method : show  object : entryList  value : nil  extras : nil     When a user shows the details of an item in the entry list:   category : action  method : show  object : entryDetail  value : nil  extras : [\"itemid\" : itemid]     When a user taps one of the copy buttons available after being shown entry details:   category : action  method : tap  object : entryCopyUsernameButton, entryCopyPasswordButton  value : nil  extras : [\"itemid\" : itemid]     When a user shows details from an item, is the password shown?:   category : action  method : tap  object : reveal_password  value : true or false, whether the pw is displayed  extras : nil     When one of the settings pages is shown to the user:   category : action  method : show  object : settings_list, settings_autolock, settings_preferred_browser, settings_account, settings_faq, settings_provide_feedback  value : whatever the value of each of the above was changed to, or nil for settings_reset  extras : nil     When a user changes something on the settings page:   category : action  method : settingsChanged  object : settings_biometric_login, settings_autolock_time, settings_reset, settings_visual_lock, settings_preferred_browser, settings_record_usage_data  value : whatever the value of each of the above was changed to, or nil for settings_reset  extras : nil     When the app enters the background or foreground:   category : action  method : background, foreground  object : app  value : nil  extras : nil", 
            "title": "List of Implemented Events"
        }, 
        {
            "location": "/metrics/#references", 
            "text": "Library used to collect and send telemetry on iOS  Description of the \"Core\" ping  Description of the \"Focus Event\" Ping  Description of Event Schemas in General", 
            "title": "References"
        }, 
        {
            "location": "/install/", 
            "text": "Install the latest \nXcode developer tools\n from Apple\n\n\n\n\n\n\nInstall Carthage\n\n\nbrew update\nbrew install carthage\n\n\n\n\n\n\nClone the repository\n\n\ngit clone https://github.com/mozilla-lockbox/lockbox-ios\n\n\n\n\n\n\nPull in the project dependencies:\n\n\ncd lockbox-ios\nsh ./bootstrap.sh\n\n\n\n\n\n\nOpen \nLockbox.xcodeproj\n in Xcode\n\n\n\n\n\n\nBuild/Run the \nlockbox\n scheme in Xcode", 
            "title": "Build and Install"
        }, 
        {
            "location": "/architecture/", 
            "text": "Firefox Lockbox for iOS Architecture\n\n\nRxSwift\n\n\nFirefox Lockbox for iOS makes extensive use of RxSwift, an implementation of the Observable pattern from ReactiveX. More information and many marble diagrams can be found in the \nReactiveX documentation\n.\n\n\nPresenters \n Views\n\n\nAll views are bound to a presenter[1]. In this separation, the presenter is responsible for all business logic, and the view is abstracted to a simple protocol. The view is responsible for UI-specific configuration and passing user input to its presenter for handling. This allows any complex view-related configuration to be abstracted when dealing with business logic changes, and vice versa. Presenters should never import UIKit.\n\n\nFlux\n\n\nArchitecture Pattern\n\n\nIn short, Flux architecture design maintains a unidirectional data flow, in which a global Dispatcher receives Actions \n dispatches them to appropriate Stores. The Stores, in turn, process data \n provide the source of truth for the Views. As users interact with the Views, any updates are made via a dispatched Action and the cycle begins again. See this \nflux architecture\n writeup for more details on the Flux architecture scheme.\n\n\nUsage\n\n\nRxSwift observables are used as the hooks between the dispatcher and stores, the stores \n views, and in Action-specific cases, to deal with asynchronous application requirements.\n\n\nThe View component of Flux is represented by the Presenter+View couples. The Presenter is responsible for listening to the appropriate Store observables, and firing Actions to their respective handlers.\n\n\nRouting\n\n\nThe special case in this scenario is view routing. To handle the view-changing component of the architecture, there will be a special Store observed by a ContainerView. This \u201ccontaining\u201d view will never be displayed to the user; rather, it will perform the role of listening for navigation-specific Actions \n performing the necessary top-level navigation stack swapping or navigation stack manipulation.\n\n\nAsync\n\n\nAsynchronous pieces of work are not handled in the definition of Flux architecture. In keeping with the typical solution for this pattern, async pieces of work in Lockbox iOS will be bundled into Action handlers, keeping Stores simple in-memory repositories to track persistent data as required by the View components.\n\n\n\n\n[1] the name here is pure semantics -- can be thought of as a ViewModel", 
            "title": "Architecture"
        }, 
        {
            "location": "/architecture/#firefox-lockbox-for-ios-architecture", 
            "text": "", 
            "title": "Firefox Lockbox for iOS Architecture"
        }, 
        {
            "location": "/architecture/#rxswift", 
            "text": "Firefox Lockbox for iOS makes extensive use of RxSwift, an implementation of the Observable pattern from ReactiveX. More information and many marble diagrams can be found in the  ReactiveX documentation .", 
            "title": "RxSwift"
        }, 
        {
            "location": "/architecture/#presenters-views", 
            "text": "All views are bound to a presenter[1]. In this separation, the presenter is responsible for all business logic, and the view is abstracted to a simple protocol. The view is responsible for UI-specific configuration and passing user input to its presenter for handling. This allows any complex view-related configuration to be abstracted when dealing with business logic changes, and vice versa. Presenters should never import UIKit.", 
            "title": "Presenters &amp; Views"
        }, 
        {
            "location": "/architecture/#flux", 
            "text": "", 
            "title": "Flux"
        }, 
        {
            "location": "/architecture/#architecture-pattern", 
            "text": "In short, Flux architecture design maintains a unidirectional data flow, in which a global Dispatcher receives Actions   dispatches them to appropriate Stores. The Stores, in turn, process data   provide the source of truth for the Views. As users interact with the Views, any updates are made via a dispatched Action and the cycle begins again. See this  flux architecture  writeup for more details on the Flux architecture scheme.", 
            "title": "Architecture Pattern"
        }, 
        {
            "location": "/architecture/#usage", 
            "text": "RxSwift observables are used as the hooks between the dispatcher and stores, the stores   views, and in Action-specific cases, to deal with asynchronous application requirements.  The View component of Flux is represented by the Presenter+View couples. The Presenter is responsible for listening to the appropriate Store observables, and firing Actions to their respective handlers.", 
            "title": "Usage"
        }, 
        {
            "location": "/architecture/#routing", 
            "text": "The special case in this scenario is view routing. To handle the view-changing component of the architecture, there will be a special Store observed by a ContainerView. This \u201ccontaining\u201d view will never be displayed to the user; rather, it will perform the role of listening for navigation-specific Actions   performing the necessary top-level navigation stack swapping or navigation stack manipulation.", 
            "title": "Routing"
        }, 
        {
            "location": "/architecture/#async", 
            "text": "Asynchronous pieces of work are not handled in the definition of Flux architecture. In keeping with the typical solution for this pattern, async pieces of work in Lockbox iOS will be bundled into Action handlers, keeping Stores simple in-memory repositories to track persistent data as required by the View components.   [1] the name here is pure semantics -- can be thought of as a ViewModel", 
            "title": "Async"
        }, 
        {
            "location": "/updating_libraries/", 
            "text": "External Dependencies\n\n\nSwift frameworks\n\n\nAll Swift frameworks are managed via \nCarthage\n. In the home directory for the project, run \ncarthage update --platform iOS\n to fetch \n build dependencies.\n\n\nNOTE:\n  In some cases, the Swift frameworks might be built using a different version of Swift (e.g., 4.0 versus 4.1) and an error like the following is encountered for the mismatch:\n\n\n    Incompatible Swift version - framework was built with 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2) and the local version is 4.1 (swiftlang-902.0.48 clang-902.0.37.1).\n\n\n\n\nIf this occurs, run \ncarthage update --platform iOS --no-use-binaries\n to build from sources instead.\n\n\nC Libraries\n\n\nFirefox Lockbox for iOS uses \ncjose\n for JOSE encryption \n decryption in the FxA OAuth flow. The binaries to support this external dependency are provided along with this code (in the \nlockbox-ios/binaries\n folder). However, if you find yourself wanting to update this library (or either of its dependencies, Jansson or OpenSSL), navigate to the \nscripts\n directory and run \n./update-dependencies\n. NOTE: You will have to build the project at least once for the appropriate \nbinaries\n folder to get un-tarred (or you can do it yourself).", 
            "title": "Dependencies"
        }, 
        {
            "location": "/updating_libraries/#external-dependencies", 
            "text": "", 
            "title": "External Dependencies"
        }, 
        {
            "location": "/updating_libraries/#swift-frameworks", 
            "text": "All Swift frameworks are managed via  Carthage . In the home directory for the project, run  carthage update --platform iOS  to fetch   build dependencies.  NOTE:   In some cases, the Swift frameworks might be built using a different version of Swift (e.g., 4.0 versus 4.1) and an error like the following is encountered for the mismatch:      Incompatible Swift version - framework was built with 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2) and the local version is 4.1 (swiftlang-902.0.48 clang-902.0.37.1).  If this occurs, run  carthage update --platform iOS --no-use-binaries  to build from sources instead.", 
            "title": "Swift frameworks"
        }, 
        {
            "location": "/updating_libraries/#c-libraries", 
            "text": "Firefox Lockbox for iOS uses  cjose  for JOSE encryption   decryption in the FxA OAuth flow. The binaries to support this external dependency are provided along with this code (in the  lockbox-ios/binaries  folder). However, if you find yourself wanting to update this library (or either of its dependencies, Jansson or OpenSSL), navigate to the  scripts  directory and run  ./update-dependencies . NOTE: You will have to build the project at least once for the appropriate  binaries  folder to get un-tarred (or you can do it yourself).", 
            "title": "C Libraries"
        }, 
        {
            "location": "/releases/", 
            "text": "Release Instructions\n\n\nSome assumptions:\n\n\n\n\nmaster\n is the default branch and is production-ready\n\n\ncommits made to master are built and pass in \nbuddybuild\n\n\nall builds are sent to iTunes Connect, with the same buddybuild build number\n\n\niTunes Connect has \n\"internal\" testers\n (mobile devs, product integrity)\n\n\nthus, iTunes Connect and TestFlight can have \n\"external\" testers\n which we add manually\n\n\ncurrently, no plans exist for \"external\" users to include anyone outside of Mozilla\n\n\n\n\nDistributing Builds through buddybuild (branch / release)\n\n\nall commits on all branches and pull requests are automatically built\n\n\n\n\nPush to the GitHub branch\n\n\nOpen \nbuddybuild\n from a mobile device and browse to the build\n\n\nAlternatively, add an email address to the \"Deployments\" email list(s)\n\n\nthis is expected to be a small group of contributors and Mozillians\n\n\n\n\nDistributing Builds through TestFlight (release)\n\n\nall \nmaster\n branch builds are automatically uploaded from buddybuild\n\n\n\n\nBrowse to \nTestFlight \n Builds \n iOS\n\n\nFind the desired build number to distribute\n\n\nProvide \nexport compliance responses\n\n\nthis makes the build immediately available to \"internal\" iTunes Connect users\n\n\nAdd at least one other \"Group\" of \"external\" testers to the build\n\n\nafter review, this will make it available for all those \"external\" testers\n\n\nexample: \"lockbox-dev\" which includes our other non-iTunes Connect engineers\n\n\nexample: \"Product\" which includes other product and content Mozillians\n\n\n\n\nDistributing through the App Store (release)\n\n\n\n\nBrowse to iTunes Connect\n\n\n???\n\n\nProfit", 
            "title": "Release Instructions"
        }, 
        {
            "location": "/releases/#release-instructions", 
            "text": "Some assumptions:   master  is the default branch and is production-ready  commits made to master are built and pass in  buddybuild  all builds are sent to iTunes Connect, with the same buddybuild build number  iTunes Connect has  \"internal\" testers  (mobile devs, product integrity)  thus, iTunes Connect and TestFlight can have  \"external\" testers  which we add manually  currently, no plans exist for \"external\" users to include anyone outside of Mozilla", 
            "title": "Release Instructions"
        }, 
        {
            "location": "/releases/#distributing-builds-through-buddybuild-branch-release", 
            "text": "all commits on all branches and pull requests are automatically built   Push to the GitHub branch  Open  buddybuild  from a mobile device and browse to the build  Alternatively, add an email address to the \"Deployments\" email list(s)  this is expected to be a small group of contributors and Mozillians", 
            "title": "Distributing Builds through buddybuild (branch / release)"
        }, 
        {
            "location": "/releases/#distributing-builds-through-testflight-release", 
            "text": "all  master  branch builds are automatically uploaded from buddybuild   Browse to  TestFlight   Builds   iOS  Find the desired build number to distribute  Provide  export compliance responses  this makes the build immediately available to \"internal\" iTunes Connect users  Add at least one other \"Group\" of \"external\" testers to the build  after review, this will make it available for all those \"external\" testers  example: \"lockbox-dev\" which includes our other non-iTunes Connect engineers  example: \"Product\" which includes other product and content Mozillians", 
            "title": "Distributing Builds through TestFlight (release)"
        }, 
        {
            "location": "/releases/#distributing-through-the-app-store-release", 
            "text": "Browse to iTunes Connect  ???  Profit", 
            "title": "Distributing through the App Store (release)"
        }
    ]
}