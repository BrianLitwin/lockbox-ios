{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Firefox Lockbox for iOS documentation!","title":"Introduction"},{"location":"architecture/","text":"Firefox Lockbox for iOS Architecture RxSwift Firefox Lockbox for iOS makes extensive use of RxSwift, an implementation of the Observable pattern from ReactiveX. More information and many marble diagrams can be found in the ReactiveX documentation . The rest of this document relies on a basic understanding of the reader of the ReactiveX-style Observer implementation. Their intro document is a good starting point . Flux Architecture Pattern In short, Flux architecture design maintains a unidirectional data flow, in which a global Dispatcher receives Actions dispatches them to appropriate Stores. The Stores, in turn, process data provide the source of truth for the Views. As users interact with the Views, any updates are made via a dispatched Action and the cycle begins again. See this flux architecture writeup for more details on the original Flux architecture scheme. Lockbox implements a modified version of the described architecture (LockFlux), keeping in mind that the original implementation ignores asynchronous work. The key difference is in the implementation of an ActionHandler class. The ActionHandler s in some cases are a simple pass-through class for the dispatcher, but in others do some background work before dispatching the Action . Memory Management The six major components of this architecture ( View , Presenter , Store , Dispatcher , ActionHandler , and Action ) have distinct lifecycle management based on their functions. View / Presenter pairs are allocated and de-allocated as views get displayed or hidden in turn. Store s, ActionHandler s, and the Dispatcher are global singleton objects, meaning that they get lazy-loaded by the application as their shared members get accessed by the Presenter s for view configuration or dispatching. Action s get deallocated as soon as they reach the end observer for their intended function. View/Presenter All views are bound to a presenter[ 1 ]. In this separation, the presenter is responsible for all business logic, and the view is abstracted to a simple protocol. The view is responsible for UIKit-specific configuration and passing user input to its presenter for handling. This allows any complex view-related configuration to be abstracted when dealing with business logic changes, and vice versa. Presenters should never import UIKit in this separation of concerns. The View component of these view-presenter pairs maintains a strong reference to its Presenter , while the Presenter maintains a weak reference to the view to avoid retain cycles under ARC . Action Actions are tiny struct s or enum s that contain declarative language about either the triggering user action or the update request for a given Store . Dispatcher The dispatcher class is the simplest in the application; it provides an Action -accepting method as a wrapper for the PublishSubject Action that publishes all dispatched actions to interested Stores : class Dispatcher { static let shared = Dispatcher() private let storeDispatchSubject = PublishSubject Action () open var register: Observable Action { return self.storeDispatchSubject.asObservable() } open func dispatch(action: Action) { self.storeDispatchSubject.onNext(action) } } Store Stores provide an opaque wrapper around system storage or simple Replay- /Publish- Subject s for the purposes of data access and view configuration. View Routing The special case in this scenario is view routing. To handle the view-changing component of the architecture, there is a RouteStore observed by a RootPresenter that rides along on the back of a RootView . This \u201ccontaining\u201d view will never be displayed to the user; rather, it will perform the role of listening for navigation-specific Action s performing the necessary top-level navigation stack swapping or navigation stack manipulation. Routing logic lives entirely separately from individual view configuration logic, allowing for modular view manipulation and easy testing. Example To fully understand the concept, it's useful to trace one user action through its lifecycle of use in the app. Following is a simplified description of how the filter field (or search box) on the main item list screen works. When a user enters text into the search field, the textfield binding[ 2 ] on the ItemListView emits an event to an observer on the ItemListPresenter . The ItemListPresenter dispatches a ItemListFilterAction , which is a simple struct with one property - filteringText: String . The struct does a round trip through the ItemListDisplayActionHandler , Dispatcher , and ItemListDisplayStore before getting combined with the most recent list of items back in the ItemListPresenter . This combined Observable stream with both the text and the items filters the list of items and maps the filtered list into individual cell configurations. The view, on receiving the updated / filtered list, re-renders the list of items to only show the ones that the user is searching for. There are a few other listeners for ItemListFilterAction s; for example, the Observable bound to the isHidden property of the Cancel button in the search bar maps the ItemListFilterAction with a simple !isEmpty check -- if the ItemListFilterAction.filteringText is empty, the cancel button is hidden, and if not, it's displayed. While it may seem like a lot of work to make the roundtrip with the Dispatcher , Current ActionHandler technical debt / area for improvement In the current LockFlux implementation, there is a discrepancy in the ways that asynchronous work is done. In some cases, async work is done behind the scenes at the Store level, and in others, as part of the pass-through setup between ActionHandler s and the Dispatcher . Ideally, we would get rid of the ActionHandler concept altogether, and Presenter s would construct and dispatch Action s directly to the Dispatcher . This will simplify tests and the architecture quite a bit. [1] the name here is pure semantics -- can be thought of as a ViewModel [2] an Observable stream coming from the RxCocoa bindings for UITextField","title":"Architecture"},{"location":"architecture/#firefox-lockbox-for-ios-architecture","text":"","title":"Firefox Lockbox for iOS Architecture"},{"location":"architecture/#rxswift","text":"Firefox Lockbox for iOS makes extensive use of RxSwift, an implementation of the Observable pattern from ReactiveX. More information and many marble diagrams can be found in the ReactiveX documentation . The rest of this document relies on a basic understanding of the reader of the ReactiveX-style Observer implementation. Their intro document is a good starting point .","title":"RxSwift"},{"location":"architecture/#flux","text":"","title":"Flux"},{"location":"architecture/#architecture-pattern","text":"In short, Flux architecture design maintains a unidirectional data flow, in which a global Dispatcher receives Actions dispatches them to appropriate Stores. The Stores, in turn, process data provide the source of truth for the Views. As users interact with the Views, any updates are made via a dispatched Action and the cycle begins again. See this flux architecture writeup for more details on the original Flux architecture scheme. Lockbox implements a modified version of the described architecture (LockFlux), keeping in mind that the original implementation ignores asynchronous work. The key difference is in the implementation of an ActionHandler class. The ActionHandler s in some cases are a simple pass-through class for the dispatcher, but in others do some background work before dispatching the Action .","title":"Architecture Pattern"},{"location":"architecture/#memory-management","text":"The six major components of this architecture ( View , Presenter , Store , Dispatcher , ActionHandler , and Action ) have distinct lifecycle management based on their functions. View / Presenter pairs are allocated and de-allocated as views get displayed or hidden in turn. Store s, ActionHandler s, and the Dispatcher are global singleton objects, meaning that they get lazy-loaded by the application as their shared members get accessed by the Presenter s for view configuration or dispatching. Action s get deallocated as soon as they reach the end observer for their intended function.","title":"Memory Management"},{"location":"architecture/#viewpresenter","text":"All views are bound to a presenter[ 1 ]. In this separation, the presenter is responsible for all business logic, and the view is abstracted to a simple protocol. The view is responsible for UIKit-specific configuration and passing user input to its presenter for handling. This allows any complex view-related configuration to be abstracted when dealing with business logic changes, and vice versa. Presenters should never import UIKit in this separation of concerns. The View component of these view-presenter pairs maintains a strong reference to its Presenter , while the Presenter maintains a weak reference to the view to avoid retain cycles under ARC .","title":"View/Presenter"},{"location":"architecture/#action","text":"Actions are tiny struct s or enum s that contain declarative language about either the triggering user action or the update request for a given Store .","title":"Action"},{"location":"architecture/#dispatcher","text":"The dispatcher class is the simplest in the application; it provides an Action -accepting method as a wrapper for the PublishSubject Action that publishes all dispatched actions to interested Stores : class Dispatcher { static let shared = Dispatcher() private let storeDispatchSubject = PublishSubject Action () open var register: Observable Action { return self.storeDispatchSubject.asObservable() } open func dispatch(action: Action) { self.storeDispatchSubject.onNext(action) } }","title":"Dispatcher"},{"location":"architecture/#store","text":"Stores provide an opaque wrapper around system storage or simple Replay- /Publish- Subject s for the purposes of data access and view configuration.","title":"Store"},{"location":"architecture/#view-routing","text":"The special case in this scenario is view routing. To handle the view-changing component of the architecture, there is a RouteStore observed by a RootPresenter that rides along on the back of a RootView . This \u201ccontaining\u201d view will never be displayed to the user; rather, it will perform the role of listening for navigation-specific Action s performing the necessary top-level navigation stack swapping or navigation stack manipulation. Routing logic lives entirely separately from individual view configuration logic, allowing for modular view manipulation and easy testing.","title":"View Routing"},{"location":"architecture/#example","text":"To fully understand the concept, it's useful to trace one user action through its lifecycle of use in the app. Following is a simplified description of how the filter field (or search box) on the main item list screen works. When a user enters text into the search field, the textfield binding[ 2 ] on the ItemListView emits an event to an observer on the ItemListPresenter . The ItemListPresenter dispatches a ItemListFilterAction , which is a simple struct with one property - filteringText: String . The struct does a round trip through the ItemListDisplayActionHandler , Dispatcher , and ItemListDisplayStore before getting combined with the most recent list of items back in the ItemListPresenter . This combined Observable stream with both the text and the items filters the list of items and maps the filtered list into individual cell configurations. The view, on receiving the updated / filtered list, re-renders the list of items to only show the ones that the user is searching for. There are a few other listeners for ItemListFilterAction s; for example, the Observable bound to the isHidden property of the Cancel button in the search bar maps the ItemListFilterAction with a simple !isEmpty check -- if the ItemListFilterAction.filteringText is empty, the cancel button is hidden, and if not, it's displayed. While it may seem like a lot of work to make the roundtrip with the Dispatcher ,","title":"Example"},{"location":"architecture/#current-actionhandler-technical-debt-area-for-improvement","text":"In the current LockFlux implementation, there is a discrepancy in the ways that asynchronous work is done. In some cases, async work is done behind the scenes at the Store level, and in others, as part of the pass-through setup between ActionHandler s and the Dispatcher . Ideally, we would get rid of the ActionHandler concept altogether, and Presenter s would construct and dispatch Action s directly to the Dispatcher . This will simplify tests and the architecture quite a bit. [1] the name here is pure semantics -- can be thought of as a ViewModel [2] an Observable stream coming from the RxCocoa bindings for UITextField","title":"Current ActionHandler technical debt / area for improvement"},{"location":"code_of_conduct/","text":"Code of Conduct This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"contributing/","text":"Contributing Thank you for considering and taking the time to contribute! The following are guidelines for contributing to this project. Code of Conduct This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines . How to Get Started Please refer to installation and build instructions in the documentation . How to Report Bugs Please open a new issue in the GitHub repository with steps to reproduce the problem you're experiencing. Be sure to include as much information including screenshots, text output, and both your expected and actual results. How to Request Enhancements First, please refer to the applicable GitHub repository and search the repository's GitHub issues to make sure your idea has not been (or is not still) considered. Then, please create a new issue in the GitHub repository describing your enhancement. Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile. Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented. How to Contribute Code Before you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of good first issues and find something that sounds interesting. If there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to file an issue first. Once you have a patch ready: Make sure all tests are passing and try to add tests for the code you've written. You can run tests in XCode by selecting the uispecs target and hitting CMD-U. Submit a pull request! From there, we'll guide you through the review process to the eventual landing of your code. We aim to respond to all review requests within two business days.","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for considering and taking the time to contribute! The following are guidelines for contributing to this project.","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"contributing/#how-to-get-started","text":"Please refer to installation and build instructions in the documentation .","title":"How to Get Started"},{"location":"contributing/#how-to-report-bugs","text":"Please open a new issue in the GitHub repository with steps to reproduce the problem you're experiencing. Be sure to include as much information including screenshots, text output, and both your expected and actual results.","title":"How to Report Bugs"},{"location":"contributing/#how-to-request-enhancements","text":"First, please refer to the applicable GitHub repository and search the repository's GitHub issues to make sure your idea has not been (or is not still) considered. Then, please create a new issue in the GitHub repository describing your enhancement. Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile. Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.","title":"How to Request Enhancements"},{"location":"contributing/#how-to-contribute-code","text":"Before you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of good first issues and find something that sounds interesting. If there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to file an issue first. Once you have a patch ready: Make sure all tests are passing and try to add tests for the code you've written. You can run tests in XCode by selecting the uispecs target and hitting CMD-U. Submit a pull request! From there, we'll guide you through the review process to the eventual landing of your code. We aim to respond to all review requests within two business days.","title":"How to Contribute Code"},{"location":"export-compliance/","text":"Export Compliance Information Does your app use encryption? Select Yes even if your app only uses the standard encryption in iOS and macOS. Yes Does your app qualify for any of the exemptions provided in Category 5, Part 2 of the U.S. Export Administration Regulations? No Does your app implement any encryption algorithms that are proprietary or yet-to-be-accepted as standards by international standard bodies (IEEE, IETF, ITU, etc.)? No Does your app implement any standard encryption algorithms instead of, or in addition to, using or accessing the encryption in Apple\u2019s iOS or macOS? Yes Is your app going to be available on the French App Store? No","title":"Export Compliance Information"},{"location":"export-compliance/#export-compliance-information","text":"Does your app use encryption? Select Yes even if your app only uses the standard encryption in iOS and macOS. Yes Does your app qualify for any of the exemptions provided in Category 5, Part 2 of the U.S. Export Administration Regulations? No Does your app implement any encryption algorithms that are proprietary or yet-to-be-accepted as standards by international standard bodies (IEEE, IETF, ITU, etc.)? No Does your app implement any standard encryption algorithms instead of, or in addition to, using or accessing the encryption in Apple\u2019s iOS or macOS? Yes Is your app going to be available on the French App Store? No","title":"Export Compliance Information"},{"location":"install/","text":"Install Xcode version 9.4.1 Install the latest Xcode developer tools from Apple Install Carthage brew update brew install carthage Clone the repository git clone https://github.com/mozilla-lockbox/lockbox-ios Pull in the project dependencies: cd lockbox-ios sh ./bootstrap.sh Open Lockbox.xcodeproj in Xcode Build/Run the lockbox scheme in Xcode","title":"Build and Install"},{"location":"metrics/","text":"Firefox Lockbox for iOS Metrics Plan Last Updated: May 1, 2018 Analysis Collection List of Proposed Events References This is the metrics collection plan for the Lockbox iOS app. It documents all events that are planned to be collected through telemetry. It will be updated periodically to reflect all new and planned data collection. Analysis Data collection is done solely for the purpose of product development, improvement and maintenance. We will analyze the data described in this doc primarily with the purpose of (dis)confirming the following hypothesis: If Firefox users have access to their browser-saved passwords, outside of the mobile browser, then they will use those passwords to log into accounts (both in mobile browsers and in apps). We will know this to be true when copy credentials (username or password) is the most frequent action taken in the app. Note that because the first version of the app will not allow for \"auto-filling\" of credentials, the copy events (and to a lesser extent, the password reveal events) are the best signal we have that users are gaining the intended value from the app. In service to validating the above hypothesis, we plan on answering these specific questions, given the data we plan to collect (see List of Proposed Events ): Note that when referring to copying of \"credentials\", we mean copying of either usernames or passwords. Are users using Lockbox to retrieve credentials? For different intervals of time (e.g. day, week, month), what is: The average rate with which a user copies a credential or reveals a password The distribution of above rates across all users Pending the implementation of a share sheet, how often do users access Lockbox via a mobile browser? Out of all the times a credential was copied, how often was it a result of tap on the share sheet? This will help us understand whether users are primarily accessing credentials for use in a browser or with third party apps. Once downloaded, do users continue to use the app? (i.e., how well are they retained?) We will count a user as retained in a given time interval if they perform one of the following actions: Display the credential list Tap a credential in the credential list Copy a credential to the clipboard Reveal a password Tap the URI associated with a credential (to open it in an app or browser) Since they can be performed automatically, we will not count a user as retained if they only perform the following actions (in absence of any in the list above): Unlock their credentials Sync their credentials from the Firefox desktop browser Does requiring a Firefox Account constitute a roadblock to adoption? What proportion of new Lockbox users are pre-existing Firefox Account users? What proportion of users start the Account sign-in process but never complete it? Does adoption of Lockbox lead to adoption of Firefox Mobile browsers (e.g. Focus)? Do users set the default browser in Lockbox to be a Firefox-related browser? In addition to answering the above questions that directly concern actions in the app, we will also be analyzing telemetry emitted from the password manager that exists in the the Firefox desktop browser. These analyses will primarily examine whether users of Lockbox start active curation of their credentials in the desktop browser (Lockbox users will not be able to edit credentials directly from the app). Collection Data will be collected using this library: https://github.com/mozilla-mobile/telemetry-ios/ We plan to submit two ping types. First is the \"core ping\", which contains information about the iOS version, architecture, etc of the device lockbox has been installed on: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/core-ping.html The second is the \"focus event ping\" which allows us to record event telemetry: https://github.com/mozilla-mobile/focus-ios/wiki/Event-Tracking-with-Mozilla%27s-Telemetry-Service The ping types are defined in lockbox-ios/Common/AppDelegate.swift . Scheduling of ping transmission is done in the same file. Every event must contain category , method and object fields, and may optionally contain value and extra fields as well. Possible values for the former three fields are defined in lockbox-ios/TelemetryIntegration.swift Events related to specific items should have an item id in the extra field where possible. Here's an example of (something like) the swift code needed to record the event that fires when an item in the entry list is tapped: Telemetry.default.recordEvent( category: TelemetryEventCategory.action, method: TelemetryEventMethod.tap, object: TelemetryEventObject.entryList, value: nil, extras: [ itemid : itemid] ) Finally, the appName metadata sent with each ping should always be 'Lockbox'. See here for more information on event schemas: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#public-js-api List of Implemented Events When the app starts up: category : action method : startup object : app value : nil extras : nil Events that fire during the signin process: category : action method : show object : login_welcome, login_fxa, login_learn_more value : nil extras : nil When the main item list is shown to the user: category : action method : show object : entryList value : nil extras : nil When a user shows the details of an item in the entry list: category : action method : show object : entryDetail value : nil extras : [\"itemid\" : itemid] When a user taps one of the copy buttons available after being shown entry details: category : action method : tap object : entryCopyUsernameButton, entryCopyPasswordButton value : nil extras : [\"itemid\" : itemid] When a user shows details from an item, is the password shown?: category : action method : tap object : reveal_password value : true or false, whether the pw is displayed extras : nil When one of the settings pages is shown to the user: category : action method : show object : settings_list, settings_autolock, settings_preferred_browser, settings_account, settings_faq, settings_provide_feedback value : whatever the value of each of the above was changed to, or nil for settings_reset extras : nil When a user changes something on the settings page: category : action method : settingsChanged object : settings_biometric_login, settings_autolock_time, settings_reset, settings_visual_lock, settings_preferred_browser, settings_record_usage_data value : whatever the value of each of the above was changed to, or nil for settings_reset extras : nil When the app enters the background or foreground: category : action method : background, foreground object : app value : nil extras : nil References Library used to collect and send telemetry on iOS Description of the \"Core\" ping Description of the \"Focus Event\" Ping Description of Event Schemas in General","title":"Telemetry and Metrics"},{"location":"metrics/#firefox-lockbox-for-ios-metrics-plan","text":"Last Updated: May 1, 2018 Analysis Collection List of Proposed Events References This is the metrics collection plan for the Lockbox iOS app. It documents all events that are planned to be collected through telemetry. It will be updated periodically to reflect all new and planned data collection.","title":"Firefox Lockbox for iOS Metrics Plan"},{"location":"metrics/#analysis","text":"Data collection is done solely for the purpose of product development, improvement and maintenance. We will analyze the data described in this doc primarily with the purpose of (dis)confirming the following hypothesis: If Firefox users have access to their browser-saved passwords, outside of the mobile browser, then they will use those passwords to log into accounts (both in mobile browsers and in apps). We will know this to be true when copy credentials (username or password) is the most frequent action taken in the app. Note that because the first version of the app will not allow for \"auto-filling\" of credentials, the copy events (and to a lesser extent, the password reveal events) are the best signal we have that users are gaining the intended value from the app. In service to validating the above hypothesis, we plan on answering these specific questions, given the data we plan to collect (see List of Proposed Events ): Note that when referring to copying of \"credentials\", we mean copying of either usernames or passwords. Are users using Lockbox to retrieve credentials? For different intervals of time (e.g. day, week, month), what is: The average rate with which a user copies a credential or reveals a password The distribution of above rates across all users Pending the implementation of a share sheet, how often do users access Lockbox via a mobile browser? Out of all the times a credential was copied, how often was it a result of tap on the share sheet? This will help us understand whether users are primarily accessing credentials for use in a browser or with third party apps. Once downloaded, do users continue to use the app? (i.e., how well are they retained?) We will count a user as retained in a given time interval if they perform one of the following actions: Display the credential list Tap a credential in the credential list Copy a credential to the clipboard Reveal a password Tap the URI associated with a credential (to open it in an app or browser) Since they can be performed automatically, we will not count a user as retained if they only perform the following actions (in absence of any in the list above): Unlock their credentials Sync their credentials from the Firefox desktop browser Does requiring a Firefox Account constitute a roadblock to adoption? What proportion of new Lockbox users are pre-existing Firefox Account users? What proportion of users start the Account sign-in process but never complete it? Does adoption of Lockbox lead to adoption of Firefox Mobile browsers (e.g. Focus)? Do users set the default browser in Lockbox to be a Firefox-related browser? In addition to answering the above questions that directly concern actions in the app, we will also be analyzing telemetry emitted from the password manager that exists in the the Firefox desktop browser. These analyses will primarily examine whether users of Lockbox start active curation of their credentials in the desktop browser (Lockbox users will not be able to edit credentials directly from the app).","title":"Analysis"},{"location":"metrics/#collection","text":"Data will be collected using this library: https://github.com/mozilla-mobile/telemetry-ios/ We plan to submit two ping types. First is the \"core ping\", which contains information about the iOS version, architecture, etc of the device lockbox has been installed on: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/core-ping.html The second is the \"focus event ping\" which allows us to record event telemetry: https://github.com/mozilla-mobile/focus-ios/wiki/Event-Tracking-with-Mozilla%27s-Telemetry-Service The ping types are defined in lockbox-ios/Common/AppDelegate.swift . Scheduling of ping transmission is done in the same file. Every event must contain category , method and object fields, and may optionally contain value and extra fields as well. Possible values for the former three fields are defined in lockbox-ios/TelemetryIntegration.swift Events related to specific items should have an item id in the extra field where possible. Here's an example of (something like) the swift code needed to record the event that fires when an item in the entry list is tapped: Telemetry.default.recordEvent( category: TelemetryEventCategory.action, method: TelemetryEventMethod.tap, object: TelemetryEventObject.entryList, value: nil, extras: [ itemid : itemid] ) Finally, the appName metadata sent with each ping should always be 'Lockbox'. See here for more information on event schemas: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#public-js-api","title":"Collection"},{"location":"metrics/#list-of-implemented-events","text":"When the app starts up: category : action method : startup object : app value : nil extras : nil Events that fire during the signin process: category : action method : show object : login_welcome, login_fxa, login_learn_more value : nil extras : nil When the main item list is shown to the user: category : action method : show object : entryList value : nil extras : nil When a user shows the details of an item in the entry list: category : action method : show object : entryDetail value : nil extras : [\"itemid\" : itemid] When a user taps one of the copy buttons available after being shown entry details: category : action method : tap object : entryCopyUsernameButton, entryCopyPasswordButton value : nil extras : [\"itemid\" : itemid] When a user shows details from an item, is the password shown?: category : action method : tap object : reveal_password value : true or false, whether the pw is displayed extras : nil When one of the settings pages is shown to the user: category : action method : show object : settings_list, settings_autolock, settings_preferred_browser, settings_account, settings_faq, settings_provide_feedback value : whatever the value of each of the above was changed to, or nil for settings_reset extras : nil When a user changes something on the settings page: category : action method : settingsChanged object : settings_biometric_login, settings_autolock_time, settings_reset, settings_visual_lock, settings_preferred_browser, settings_record_usage_data value : whatever the value of each of the above was changed to, or nil for settings_reset extras : nil When the app enters the background or foreground: category : action method : background, foreground object : app value : nil extras : nil","title":"List of Implemented Events"},{"location":"metrics/#references","text":"Library used to collect and send telemetry on iOS Description of the \"Core\" ping Description of the \"Focus Event\" Ping Description of Event Schemas in General","title":"References"},{"location":"new-ui/","text":"Adding new UI or features to Firefox Lockbox Testing Is it covered by XCUITests already? If not, make sure to add accessibilityID s to all relevant view components in the form: - descriptiveCamelCase.button for buttons - descriptiveCamelCase.textField for text fields - etc... Accessibility Have you tried using VoiceOver to access your feature? Do all important and / or visible view components have accessibilityLabel s? Localization Does your feature have strings? They should probably go in Constants.swift (more recommendations tbd on localization infrastructure for Lockbox) User Defaults Are you adding a new value to UserDefaults ? Is there an upgrade path for users that don't have the value yet?","title":"Adding new UI or features to Firefox Lockbox"},{"location":"new-ui/#adding-new-ui-or-features-to-firefox-lockbox","text":"","title":"Adding new UI or features to Firefox Lockbox"},{"location":"new-ui/#testing","text":"Is it covered by XCUITests already? If not, make sure to add accessibilityID s to all relevant view components in the form: - descriptiveCamelCase.button for buttons - descriptiveCamelCase.textField for text fields - etc...","title":"Testing"},{"location":"new-ui/#accessibility","text":"Have you tried using VoiceOver to access your feature? Do all important and / or visible view components have accessibilityLabel s?","title":"Accessibility"},{"location":"new-ui/#localization","text":"Does your feature have strings? They should probably go in Constants.swift (more recommendations tbd on localization infrastructure for Lockbox)","title":"Localization"},{"location":"new-ui/#user-defaults","text":"Are you adding a new value to UserDefaults ? Is there an upgrade path for users that don't have the value yet?","title":"User Defaults"},{"location":"release-notes/","text":"Release Notes 1.1.1 (Build 1717) Date: 2018-07-26 It's been two weeks since our initial public launch, and one week since we opened up to all countries. Thanks to everyone's feedback we have some minor changes and bug fixes for you in this update. We made some changes to autolocking and want your help testing it! Please let us know if you find anything unexpected. We also added Klar as a browser option instead of Focus, when available. Can all you German users with Klar installed please make sure it works OK? Here's the full list of changes: The autolock timer pauses when on a webpage so it doesn't lock when submitting feedback or reading FAQs Updated the app icon to an improved version You can pick Klar as your preferred browser (instead of Focus) if its available on your device We added the app version to the settings screen and feedback survey so we can know what you're running Fixed a visual bug on the \"Preferred Browser\" table Added ability to \"Lock Now\" for users without a device passcode set Added more autolock timer options: 15 and 30 minutes Fixed a Firefox Account bug related to server configuration Fixed it so you return to the \"Confirm Your Email\" state and screen even if your app fully quits instead of starting everything over Please note: we intentionally skipped from version 1.0 all the way to 1.1.1 for various reasons. 1.1.1 (Build 1663) Date: 2018-07-18 We made some changes to autolocking and want your help testing it! Please let us know if you find anything unexpected. We also added Klar as a browser option instead of Focus, when available. Can all you German users with Klar installed please make sure it works OK? We also show the app version number in the settings screen and add it the feedback survey so folks can easily tell us which version of the app they're using. Here's the full list of changes: Added more autolock timer options: 15 and 30 minutes The autolock timer now also pauses when viewing a webpage so it doesn't lock when submitting feedback or reading FAQs You can pick Klar as your preferred browser (instead of Focus) if its available on your device Updated the app icon to an improved version 1.1 (Build 1552) Date: 2018-06-29 This version was submitted to Apple. EASY ACCESS Firefox Lockbox makes it easy to access the passwords you already saved in Firefox across all your devices. Get your passwords on your mobile device with one simple app Auto import the passwords you already saved in the browser One touch to copy your username and password to get into apps and websites Open any website from the app to get into your accounts quickly PERSONAL TO YOU Personalized features to keep your accounts safe and personal to just you, without added hurdles. Your personal Firefox Account gets you access to all your browser saved logins Use your face or touch to unlock the app (safe to just you) Keep your passwords safe with an automatic timer which locks the app Set the browser you want to open your website URLs TRUSTED Firefox Lockbox is created by Mozilla the independent, non-profit who advocates for Internet privacy and protection for you and everyone. Mozilla believes that individuals\u2019 security and privacy on the Internet are fundamental and must not be treated as optional. 1.1 (Build 1552) Date: 2018-06-28 What's NEW? We fixed a few bugs around when the app automatically locks. Please test this out and continue using it before we submit to Apple. 1.1 (Build 1539) Date: 2018-07-27 In addition to the \"no entries after upgrade\" bug fix, we are putting finishing touches together before we submit to Apple for public release... What's NEW? Dynamic text size support, a \"no entries found\" state when no filter results, and Welcome screen layout fixes for iPhone SE. 1.1 (Build 1490) Date: 2018-06-21 Did you upgrade last week and see an empty list? Sorry! We fixed that... The last version was approved for the App Store! So we fixed some bugs and did a little more. We will submit another version for the public release shortly so please keep testing and help us make sure this is still stable. What's NEW? Improved accessibility, better indicators and buttons, list sorting bug fixes, and a new \"welcome\" screen on first run. 1.1 (Build 1473) Date: 2018-05-31 The last version was approved for the App Store! So we fixed some bugs and did a little more. We will submit another version for the public release shortly so please keep testing and help us make sure this is still stable. What's NEW? Improved accessibility, better indicators and buttons, list sorting bug fixes, and a new \"welcome\" screen on first run. 1.0 (Build 1387) This version will be submitted to the App Store! What's NEW? Fixes to unlocking mechanisms, all links are linked up, and improved accessibility. Features and functionality include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items pull to manually refresh your list of items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you need to confirm your sign in, or if you have no items Telemetry for event tracking (no personally-identifiable information is collected) 1.0 (Build 1343) Date: 2018-05-25 What's NEW? We added pull-to-refresh in the list view, a state that tells you if we're waiting on you to click a confirmation link in your email, and slightly better \"pretty\" title logic. This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items pull to manually refresh your list of items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you need to confirm your sign in, or if you have no items Telemetry for event tracking (no personally-identifiable information is collected) This build DOES NOT include: the remaining links to final FAQ content and instructions (#172) creating, updating or deleting entries (that's intentional) Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter. 1.0 (Build 1280) Date: 2018-05-23 What's NEW? We polished the interface (colors!), squashed some bugs (lock timer!), and improved the experience for those users (unsafely!) using a device without a passcode. If your app appears empty, there is one good reason and we're working on it but check your email for a confirmation link. This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you have no items found Telemetry for event tracking (no personally-identifiable information is collected) This build DOES NOT include: an alert when we're stuck waiting on you to confirm your Firefox Accounts sign in (#417) a few more links to real FAQ content and instructions (#172) creating, updating or deleting entries (that's intentional) Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter. 1.0 (Build 1189) Date: 2018-05-18 What's NEW? We squashed a bunch of bugs (timed locking works much better now) and added a few improvements (user-friendly titles and a sync indicator that doesn't interrupt you). To recap... This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser Telemetry for event tracking (no personally-identifiable information is collected). This build DOES NOT include: links to real FAQ content (#172 and #340) meaningful instructions when no items are found (#44) Some KNOWN ISSUES include: you may sign in and receive a \"confirmation\" email but the app wont tell you that you need to go find that email, thus your list appears empty - please go find that email (#328) if you delete the app and re-install it, your app may crash once (#374) the autolocking timer was working inconsistently and may not have automatically locked the app, please keep testing this! Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter. 1.0 (Build 1128) Date: 2018-05-14 This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox; automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data; searching and sorting items; showing/hiding passwords; copying usernames and passwords to the pasteboard (which expire after 60 seconds); opening web addresses in your preferred web browser; Telemetry for event tracking (no personally-identifiable information is collected). This build DOES NOT include: user-friendly item titles (#193); links to real FAQ content (#172 and #340); proper visual placeholders when an initial sync is occurring (#233) or when no items are found (#44). Some KNOWN ISSUES include: you may sign in and get a \"confirmation\" email, the app doesn't tell you that you need to go find that email so your list appears empty - go find that email and \"Confirm\" your sign ins, please (#328); the autolock timer doesn't automatically lock your app (#356); when navigating away from the list view and a sync occurs in the background the app will pop you back into the list view (#347); the search/filter keyboard is immediately dismissed after the first and second character you type (#351). Don't worry, we'll get these fixed soon! Please also note: the app may crash on first run \u2014 just open it again and please let us know if you encounter this or anything unexpected. We believe we squashed all kinds of bugs related to first run and sign in but need your help making sure. 1.0 (Build 742) Date: 2018-04-24 This build includes: sign in with Firefox Accounts, sign out to \"lock\", search and sort items, show/hide passwords, copy username and password to pasteboard (expires after 60 seconds), open web addresses in preferred web browser. This build does NOT include: actual Sync data (test data only), Face ID nor Touch ID biometrics to unlock, onboarding instructions, FAQ content. Please note: the only data loaded into the app is hard-coded test data (not real Sync data)","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#111-build-1717","text":"Date: 2018-07-26 It's been two weeks since our initial public launch, and one week since we opened up to all countries. Thanks to everyone's feedback we have some minor changes and bug fixes for you in this update. We made some changes to autolocking and want your help testing it! Please let us know if you find anything unexpected. We also added Klar as a browser option instead of Focus, when available. Can all you German users with Klar installed please make sure it works OK? Here's the full list of changes: The autolock timer pauses when on a webpage so it doesn't lock when submitting feedback or reading FAQs Updated the app icon to an improved version You can pick Klar as your preferred browser (instead of Focus) if its available on your device We added the app version to the settings screen and feedback survey so we can know what you're running Fixed a visual bug on the \"Preferred Browser\" table Added ability to \"Lock Now\" for users without a device passcode set Added more autolock timer options: 15 and 30 minutes Fixed a Firefox Account bug related to server configuration Fixed it so you return to the \"Confirm Your Email\" state and screen even if your app fully quits instead of starting everything over Please note: we intentionally skipped from version 1.0 all the way to 1.1.1 for various reasons.","title":"1.1.1 (Build 1717)"},{"location":"release-notes/#111-build-1663","text":"Date: 2018-07-18 We made some changes to autolocking and want your help testing it! Please let us know if you find anything unexpected. We also added Klar as a browser option instead of Focus, when available. Can all you German users with Klar installed please make sure it works OK? We also show the app version number in the settings screen and add it the feedback survey so folks can easily tell us which version of the app they're using. Here's the full list of changes: Added more autolock timer options: 15 and 30 minutes The autolock timer now also pauses when viewing a webpage so it doesn't lock when submitting feedback or reading FAQs You can pick Klar as your preferred browser (instead of Focus) if its available on your device Updated the app icon to an improved version","title":"1.1.1 (Build 1663)"},{"location":"release-notes/#11-build-1552","text":"Date: 2018-06-29 This version was submitted to Apple. EASY ACCESS Firefox Lockbox makes it easy to access the passwords you already saved in Firefox across all your devices. Get your passwords on your mobile device with one simple app Auto import the passwords you already saved in the browser One touch to copy your username and password to get into apps and websites Open any website from the app to get into your accounts quickly PERSONAL TO YOU Personalized features to keep your accounts safe and personal to just you, without added hurdles. Your personal Firefox Account gets you access to all your browser saved logins Use your face or touch to unlock the app (safe to just you) Keep your passwords safe with an automatic timer which locks the app Set the browser you want to open your website URLs TRUSTED Firefox Lockbox is created by Mozilla the independent, non-profit who advocates for Internet privacy and protection for you and everyone. Mozilla believes that individuals\u2019 security and privacy on the Internet are fundamental and must not be treated as optional.","title":"1.1 (Build 1552)"},{"location":"release-notes/#11-build-1552_1","text":"Date: 2018-06-28 What's NEW? We fixed a few bugs around when the app automatically locks. Please test this out and continue using it before we submit to Apple.","title":"1.1 (Build 1552)"},{"location":"release-notes/#11-build-1539","text":"Date: 2018-07-27 In addition to the \"no entries after upgrade\" bug fix, we are putting finishing touches together before we submit to Apple for public release... What's NEW? Dynamic text size support, a \"no entries found\" state when no filter results, and Welcome screen layout fixes for iPhone SE.","title":"1.1 (Build 1539)"},{"location":"release-notes/#11-build-1490","text":"Date: 2018-06-21 Did you upgrade last week and see an empty list? Sorry! We fixed that... The last version was approved for the App Store! So we fixed some bugs and did a little more. We will submit another version for the public release shortly so please keep testing and help us make sure this is still stable. What's NEW? Improved accessibility, better indicators and buttons, list sorting bug fixes, and a new \"welcome\" screen on first run.","title":"1.1 (Build 1490)"},{"location":"release-notes/#11-build-1473","text":"Date: 2018-05-31 The last version was approved for the App Store! So we fixed some bugs and did a little more. We will submit another version for the public release shortly so please keep testing and help us make sure this is still stable. What's NEW? Improved accessibility, better indicators and buttons, list sorting bug fixes, and a new \"welcome\" screen on first run.","title":"1.1 (Build 1473)"},{"location":"release-notes/#10-build-1387","text":"This version will be submitted to the App Store! What's NEW? Fixes to unlocking mechanisms, all links are linked up, and improved accessibility. Features and functionality include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items pull to manually refresh your list of items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you need to confirm your sign in, or if you have no items Telemetry for event tracking (no personally-identifiable information is collected)","title":"1.0 (Build 1387)"},{"location":"release-notes/#10-build-1343","text":"Date: 2018-05-25 What's NEW? We added pull-to-refresh in the list view, a state that tells you if we're waiting on you to click a confirmation link in your email, and slightly better \"pretty\" title logic. This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items pull to manually refresh your list of items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you need to confirm your sign in, or if you have no items Telemetry for event tracking (no personally-identifiable information is collected) This build DOES NOT include: the remaining links to final FAQ content and instructions (#172) creating, updating or deleting entries (that's intentional) Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter.","title":"1.0 (Build 1343)"},{"location":"release-notes/#10-build-1280","text":"Date: 2018-05-23 What's NEW? We polished the interface (colors!), squashed some bugs (lock timer!), and improved the experience for those users (unsafely!) using a device without a passcode. If your app appears empty, there is one good reason and we're working on it but check your email for a confirmation link. This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser meaningful instructions when you have no items found Telemetry for event tracking (no personally-identifiable information is collected) This build DOES NOT include: an alert when we're stuck waiting on you to confirm your Firefox Accounts sign in (#417) a few more links to real FAQ content and instructions (#172) creating, updating or deleting entries (that's intentional) Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter.","title":"1.0 (Build 1280)"},{"location":"release-notes/#10-build-1189","text":"Date: 2018-05-18 What's NEW? We squashed a bunch of bugs (timed locking works much better now) and added a few improvements (user-friendly titles and a sync indicator that doesn't interrupt you). To recap... This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data searching and sorting items user-friendly item titles to help with readability showing/hiding passwords copying usernames and passwords to the pasteboard (which expire after 60 seconds) opening web addresses in your preferred web browser Telemetry for event tracking (no personally-identifiable information is collected). This build DOES NOT include: links to real FAQ content (#172 and #340) meaningful instructions when no items are found (#44) Some KNOWN ISSUES include: you may sign in and receive a \"confirmation\" email but the app wont tell you that you need to go find that email, thus your list appears empty - please go find that email (#328) if you delete the app and re-install it, your app may crash once (#374) the autolocking timer was working inconsistently and may not have automatically locked the app, please keep testing this! Join us at https://github.com/mozilla-lockbox/lockbox-ios/issues to find any of the above items or report new issues you encounter.","title":"1.0 (Build 1189)"},{"location":"release-notes/#10-build-1128","text":"Date: 2018-05-14 This build DOES include: signing in with Firefox Accounts to see your real \"Saved Logins\" data from Firefox; automatic locking with biometrics (Touch ID / Face ID) to prevent access to your data; searching and sorting items; showing/hiding passwords; copying usernames and passwords to the pasteboard (which expire after 60 seconds); opening web addresses in your preferred web browser; Telemetry for event tracking (no personally-identifiable information is collected). This build DOES NOT include: user-friendly item titles (#193); links to real FAQ content (#172 and #340); proper visual placeholders when an initial sync is occurring (#233) or when no items are found (#44). Some KNOWN ISSUES include: you may sign in and get a \"confirmation\" email, the app doesn't tell you that you need to go find that email so your list appears empty - go find that email and \"Confirm\" your sign ins, please (#328); the autolock timer doesn't automatically lock your app (#356); when navigating away from the list view and a sync occurs in the background the app will pop you back into the list view (#347); the search/filter keyboard is immediately dismissed after the first and second character you type (#351). Don't worry, we'll get these fixed soon! Please also note: the app may crash on first run \u2014 just open it again and please let us know if you encounter this or anything unexpected. We believe we squashed all kinds of bugs related to first run and sign in but need your help making sure.","title":"1.0 (Build 1128)"},{"location":"release-notes/#10-build-742","text":"Date: 2018-04-24 This build includes: sign in with Firefox Accounts, sign out to \"lock\", search and sort items, show/hide passwords, copy username and password to pasteboard (expires after 60 seconds), open web addresses in preferred web browser. This build does NOT include: actual Sync data (test data only), Face ID nor Touch ID biometrics to unlock, onboarding instructions, FAQ content. Please note: the only data loaded into the app is hard-coded test data (not real Sync data)","title":"1.0 (Build 742)"},{"location":"releases/","text":"Release Instructions Some assumptions: master is the default branch and is production-ready commits made to master are built and pass in buddybuild production is our public release branch and may not match master ideally, production will perfectly reproduce master but if master is in an un-releasable state, we cherry-pick commits to this branch this is an exception rather than the preferred maintenance method all master and production builds are sent to iTunes Connect, with the same buddybuild build number iTunes Connect has \"internal\" testers (mobile devs, product integrity) thus, iTunes Connect and TestFlight can have \"external\" testers which we add manually currently, no plans exist for \"external\" users to include anyone outside of Mozilla Distributing Builds through buddybuild (branch / release) all commits on all branches and pull requests are automatically built Push to the git branch available on GitHub.com and open a pull request Open buddybuild from a mobile device and browse to the build Alternatively, add an email address to the \"Deployments\" email list(s) this is expected to be a small group of contributors and Mozillians Preparing a Release (for TestFlight or App Store) Update the release notes under docs/release-notes.md create a pull request to collaborate and get approval determine the next build number and include it in release notes merge the release notes to master branch this will result in a release build matching the build number provided Create and merge a pull request from master to production so it tracks the release https://github.com/mozilla-lockbox/lockbox-ios/compare/production...master Create a tag from production matching the format: major.minor.patch.build for example: 1.2.1399 is major version 1.2, (buddybuild) build 1399 for example: 1.3.1.1624 is major version 1.3 with 1 patch release, (buddybuild) build 1624 push the tag to GitHub and create a corresponding \"Release\" on GitHub.com copy the release notes to the \"Release\" on GitHub download the .ipa from buddybuild and attach it to the Release on GitHub Hopefully by now the build has been uploaded to iTunes Connect Browse to iTunes Connect and continue the \"Distributing...\" instructions In Case of Emergency (Release) similar to above, but requires explicit cherry-pick commits on production branch when master branch is not in a release-able state Merge the emergency changes or fixes or features to default master branch as usual Update the release notes Create and merge a pull request up to and including the last release-able commit on master to production Then git cherry-pick each additional commit from master to be included in the release thus skipping or avoiding the non-release-able commits Push the resulting production branch to GitHub.com Create a tag from production matching the format: major.minor.patch.build for example: 1.3.1.1624 Push the tag to GitHub and create a corresponding \"Release\" on GitHub.com copy the release notes to the \"Release\" on GitHub Browse to buddybuild and find the desired production branch build to distribute download the .ipa from buddybuild and attach it to the Release on GitHub From the buddybuild's build \"Deploy\" tab, select the \"Upload to iTunes Connect\" link Browse to iTunes Connect to find the build and continue the \"Distributing...\" instructions Distributing Builds through TestFlight (release) all master and production branch builds are automatically uploaded from buddybuild to iTunes Connect Browse to TestFlight Builds iOS in iTunes Connect Find the desired build number to distribute Provide export compliance responses this makes the build immediately available to \"internal\" iTunes Connect users Copy the release notes for this release and add them to the \"Test Details\" Add at least one other \"Group\" of \"external\" testers to the build after review, this will make it available for all those \"external\" testers example: \"lockbox-dev\" which includes our other non-iTunes Connect engineers example: \"Product\" which includes other product and content Mozillians example: \"Cohort A\" which includes the first round of volunteers to test Distributing through the App Store (release) Browse to the App Store section in iTunes Connect Confirm the \"App Information\" details are accurate and complete Confirm the \"Pricing and Availability\" details are accurate and complete Browse to the \"iOS App\" section to \"Prepare for Submission\" provide the version information (keywords, URLs, promotional screenshots) select the corresponding build number for the App Store release set the release instructions (manually, immediately, on a date) Save and \"Submit for Review\" ??? Taking screenshots for new releases Screenshots are automated via Fastlane. To get Fastlane, run brew cask install fastlane . From there, you will be able to run fastlane snapshot in the root directory of the project to run the screenshot task. Configuration: - [languages] Update / add desired locales to fastlane/Snapfile - [devices] Update / add desired device sizes to fastlane/Snapfile - text size Update the CONTENT_SIZE variable in LockboxXCUITests/BaseTestCase.swift Updating the version for a release Once a version has been merged or released, the app version should be bumped Update the value in Common/Resources/Info.plist , for example from 1.2 to 1.3","title":"Release Instructions"},{"location":"releases/#release-instructions","text":"Some assumptions: master is the default branch and is production-ready commits made to master are built and pass in buddybuild production is our public release branch and may not match master ideally, production will perfectly reproduce master but if master is in an un-releasable state, we cherry-pick commits to this branch this is an exception rather than the preferred maintenance method all master and production builds are sent to iTunes Connect, with the same buddybuild build number iTunes Connect has \"internal\" testers (mobile devs, product integrity) thus, iTunes Connect and TestFlight can have \"external\" testers which we add manually currently, no plans exist for \"external\" users to include anyone outside of Mozilla","title":"Release Instructions"},{"location":"releases/#distributing-builds-through-buddybuild-branch-release","text":"all commits on all branches and pull requests are automatically built Push to the git branch available on GitHub.com and open a pull request Open buddybuild from a mobile device and browse to the build Alternatively, add an email address to the \"Deployments\" email list(s) this is expected to be a small group of contributors and Mozillians","title":"Distributing Builds through buddybuild (branch / release)"},{"location":"releases/#preparing-a-release-for-testflight-or-app-store","text":"Update the release notes under docs/release-notes.md create a pull request to collaborate and get approval determine the next build number and include it in release notes merge the release notes to master branch this will result in a release build matching the build number provided Create and merge a pull request from master to production so it tracks the release https://github.com/mozilla-lockbox/lockbox-ios/compare/production...master Create a tag from production matching the format: major.minor.patch.build for example: 1.2.1399 is major version 1.2, (buddybuild) build 1399 for example: 1.3.1.1624 is major version 1.3 with 1 patch release, (buddybuild) build 1624 push the tag to GitHub and create a corresponding \"Release\" on GitHub.com copy the release notes to the \"Release\" on GitHub download the .ipa from buddybuild and attach it to the Release on GitHub Hopefully by now the build has been uploaded to iTunes Connect Browse to iTunes Connect and continue the \"Distributing...\" instructions","title":"Preparing a Release (for TestFlight or App Store)"},{"location":"releases/#in-case-of-emergency-release","text":"similar to above, but requires explicit cherry-pick commits on production branch when master branch is not in a release-able state Merge the emergency changes or fixes or features to default master branch as usual Update the release notes Create and merge a pull request up to and including the last release-able commit on master to production Then git cherry-pick each additional commit from master to be included in the release thus skipping or avoiding the non-release-able commits Push the resulting production branch to GitHub.com Create a tag from production matching the format: major.minor.patch.build for example: 1.3.1.1624 Push the tag to GitHub and create a corresponding \"Release\" on GitHub.com copy the release notes to the \"Release\" on GitHub Browse to buddybuild and find the desired production branch build to distribute download the .ipa from buddybuild and attach it to the Release on GitHub From the buddybuild's build \"Deploy\" tab, select the \"Upload to iTunes Connect\" link Browse to iTunes Connect to find the build and continue the \"Distributing...\" instructions","title":"In Case of Emergency (Release)"},{"location":"releases/#distributing-builds-through-testflight-release","text":"all master and production branch builds are automatically uploaded from buddybuild to iTunes Connect Browse to TestFlight Builds iOS in iTunes Connect Find the desired build number to distribute Provide export compliance responses this makes the build immediately available to \"internal\" iTunes Connect users Copy the release notes for this release and add them to the \"Test Details\" Add at least one other \"Group\" of \"external\" testers to the build after review, this will make it available for all those \"external\" testers example: \"lockbox-dev\" which includes our other non-iTunes Connect engineers example: \"Product\" which includes other product and content Mozillians example: \"Cohort A\" which includes the first round of volunteers to test","title":"Distributing Builds through TestFlight (release)"},{"location":"releases/#distributing-through-the-app-store-release","text":"Browse to the App Store section in iTunes Connect Confirm the \"App Information\" details are accurate and complete Confirm the \"Pricing and Availability\" details are accurate and complete Browse to the \"iOS App\" section to \"Prepare for Submission\" provide the version information (keywords, URLs, promotional screenshots) select the corresponding build number for the App Store release set the release instructions (manually, immediately, on a date) Save and \"Submit for Review\" ???","title":"Distributing through the App Store (release)"},{"location":"releases/#taking-screenshots-for-new-releases","text":"Screenshots are automated via Fastlane. To get Fastlane, run brew cask install fastlane . From there, you will be able to run fastlane snapshot in the root directory of the project to run the screenshot task. Configuration: - [languages] Update / add desired locales to fastlane/Snapfile - [devices] Update / add desired device sizes to fastlane/Snapfile - text size Update the CONTENT_SIZE variable in LockboxXCUITests/BaseTestCase.swift","title":"Taking screenshots for new releases"},{"location":"releases/#updating-the-version-for-a-release","text":"Once a version has been merged or released, the app version should be bumped Update the value in Common/Resources/Info.plist , for example from 1.2 to 1.3","title":"Updating the version for a release"},{"location":"test-plan/","text":"Test Plan Test plan for Firefox Lockbox for iOS See also: https://wiki.mozilla.org/QA/Mobile/LockboxiOSTestPlan Overview Firefox Lockbox for iOS is a new mobile iOS app developed with a pre-defined set of P1 \"must have\" requirements and a target release at the end of June in the Apple App Store and in Test Pilot. Mozilla Product Integrity provides embedded QA to work with the team throughout the weekly sprints allowing for ongoing testing and feedback, issue triage, and continuous test plan development and end-to-end regression testing in order to accommodate a quick release schedule and submission to the App Store by end of May. Ownership Product Integrity: Catalin Suciu, Simion Basca, Isabel Rios Product Manager: Sandy Sage Engineering Manager: Devin Reams Engineering Leads: Sasha Heinen, James Hugman, Matt Miller Entry Criteria PI has access to all product documentation, designs, code The iOS app code is available on GitHub and builds: locally via Xcode (Branch and Release) on device via buddybuild (Branch and Release) on device via TestFlight (Release) Exit Criteria All test suites against P1 \"must have\" features have performed All bugs related to the P1 \"must have\" features have been triaged All bugs resolved fixed have been verified Test Matrix Devices to be tested (no iPad): iPhone X iPhone 8 and 8 Plus iPhone 7 and 7 Plus iPhone SE Major operating system versions to be tested (current and one prior): iOS 11 (including point-release betas) iOS 10 Test Suites Documented in TestRail: https://testrail.stage.mozaws.net/index.php?/projects/overview/52 (internal Mozilla tool) Performed twice-weekly Covers all P1 \"must have\" Requirements (internal Mozilla document) 01 Sign in to Sync 02 Onboarding 03 Access saved entries 04 No entries support 05 Biometrics to lock/unlock 06 View entry 07 Copy / paste retrieval 08 View password 09 Account management 10 Support Accessibility There are a number of best practices and accessibility features available to iOS developers and we intend to build and test for: 1. VoiceOver support The reading of on-screen interface items and objects. Testing for: All on-screen navigation and button titles are read All on-screen alerts and popovers (interrupting the interface) are read All labels and text elements on screen are read Interaction elements like input boxes and filters have meaningful instructions Links to open websites are clearly indicated and read 2. User interface design The interface is legible and tappable by designing and testing for: adequate color contrasts (e.g.: no light text on light background) button and input sizes (e.g.: large enough to tap into easily and consistently) text sizes follow system adjustment (i.e. respect \"Larger Text\" setting) MVP Testing and Results documented at: https://github.com/mozilla-lockbox/lockbox-ios/issues/441 Out of Scope Internal metrics/analytics review and testing (see metrics.md ) Internal security review (performed separately)","title":"Test Plan"},{"location":"test-plan/#test-plan","text":"Test plan for Firefox Lockbox for iOS See also: https://wiki.mozilla.org/QA/Mobile/LockboxiOSTestPlan","title":"Test Plan"},{"location":"test-plan/#overview","text":"Firefox Lockbox for iOS is a new mobile iOS app developed with a pre-defined set of P1 \"must have\" requirements and a target release at the end of June in the Apple App Store and in Test Pilot. Mozilla Product Integrity provides embedded QA to work with the team throughout the weekly sprints allowing for ongoing testing and feedback, issue triage, and continuous test plan development and end-to-end regression testing in order to accommodate a quick release schedule and submission to the App Store by end of May.","title":"Overview"},{"location":"test-plan/#ownership","text":"Product Integrity: Catalin Suciu, Simion Basca, Isabel Rios Product Manager: Sandy Sage Engineering Manager: Devin Reams Engineering Leads: Sasha Heinen, James Hugman, Matt Miller","title":"Ownership"},{"location":"test-plan/#entry-criteria","text":"PI has access to all product documentation, designs, code The iOS app code is available on GitHub and builds: locally via Xcode (Branch and Release) on device via buddybuild (Branch and Release) on device via TestFlight (Release)","title":"Entry Criteria"},{"location":"test-plan/#exit-criteria","text":"All test suites against P1 \"must have\" features have performed All bugs related to the P1 \"must have\" features have been triaged All bugs resolved fixed have been verified","title":"Exit Criteria"},{"location":"test-plan/#test-matrix","text":"Devices to be tested (no iPad): iPhone X iPhone 8 and 8 Plus iPhone 7 and 7 Plus iPhone SE Major operating system versions to be tested (current and one prior): iOS 11 (including point-release betas) iOS 10","title":"Test Matrix"},{"location":"test-plan/#test-suites","text":"Documented in TestRail: https://testrail.stage.mozaws.net/index.php?/projects/overview/52 (internal Mozilla tool) Performed twice-weekly Covers all P1 \"must have\" Requirements (internal Mozilla document) 01 Sign in to Sync 02 Onboarding 03 Access saved entries 04 No entries support 05 Biometrics to lock/unlock 06 View entry 07 Copy / paste retrieval 08 View password 09 Account management 10 Support","title":"Test Suites"},{"location":"test-plan/#accessibility","text":"There are a number of best practices and accessibility features available to iOS developers and we intend to build and test for:","title":"Accessibility"},{"location":"test-plan/#1-voiceover-support","text":"The reading of on-screen interface items and objects. Testing for: All on-screen navigation and button titles are read All on-screen alerts and popovers (interrupting the interface) are read All labels and text elements on screen are read Interaction elements like input boxes and filters have meaningful instructions Links to open websites are clearly indicated and read","title":"1. VoiceOver support"},{"location":"test-plan/#2-user-interface-design","text":"The interface is legible and tappable by designing and testing for: adequate color contrasts (e.g.: no light text on light background) button and input sizes (e.g.: large enough to tap into easily and consistently) text sizes follow system adjustment (i.e. respect \"Larger Text\" setting) MVP Testing and Results documented at: https://github.com/mozilla-lockbox/lockbox-ios/issues/441","title":"2. User interface design"},{"location":"test-plan/#out-of-scope","text":"Internal metrics/analytics review and testing (see metrics.md ) Internal security review (performed separately)","title":"Out of Scope"},{"location":"updating_libraries/","text":"External Dependencies Swift frameworks All Swift frameworks are managed via Carthage . In the home directory for the project, run carthage update --platform iOS to fetch build dependencies. NOTE: In some cases, the Swift frameworks might be built using a different version of Swift (e.g., 4.0 versus 4.1) and an error like the following is encountered for the mismatch: Incompatible Swift version - framework was built with 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2) and the local version is 4.1 (swiftlang-902.0.48 clang-902.0.37.1). If this occurs, run carthage update --platform iOS --no-use-binaries to build from sources instead. C Libraries Firefox Lockbox for iOS uses cjose for JOSE encryption decryption in the FxA OAuth flow. The binaries to support this external dependency are provided along with this code (in the lockbox-ios/binaries folder). However, if you find yourself wanting to update this library (or either of its dependencies, Jansson or OpenSSL), navigate to the scripts directory and run ./update-dependencies . NOTE: You will have to build the project at least once for the appropriate binaries folder to get un-tarred (or you can do it yourself).","title":"Dependencies"},{"location":"updating_libraries/#external-dependencies","text":"","title":"External Dependencies"},{"location":"updating_libraries/#swift-frameworks","text":"All Swift frameworks are managed via Carthage . In the home directory for the project, run carthage update --platform iOS to fetch build dependencies. NOTE: In some cases, the Swift frameworks might be built using a different version of Swift (e.g., 4.0 versus 4.1) and an error like the following is encountered for the mismatch: Incompatible Swift version - framework was built with 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2) and the local version is 4.1 (swiftlang-902.0.48 clang-902.0.37.1). If this occurs, run carthage update --platform iOS --no-use-binaries to build from sources instead.","title":"Swift frameworks"},{"location":"updating_libraries/#c-libraries","text":"Firefox Lockbox for iOS uses cjose for JOSE encryption decryption in the FxA OAuth flow. The binaries to support this external dependency are provided along with this code (in the lockbox-ios/binaries folder). However, if you find yourself wanting to update this library (or either of its dependencies, Jansson or OpenSSL), navigate to the scripts directory and run ./update-dependencies . NOTE: You will have to build the project at least once for the appropriate binaries folder to get un-tarred (or you can do it yourself).","title":"C Libraries"}]}